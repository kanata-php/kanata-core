<?php

namespace Tests;

use Kanata\Commands\ActivatePluginCommand;
use Kanata\Commands\CreateCommand;
use Kanata\Commands\CreatePluginCommand;
use Kanata\Commands\DeactivatePluginCommand;
use Kanata\Commands\DebuggerCommand;
use Kanata\Commands\InfoCommand;
use Kanata\Commands\ListPluginCommand;
use Kanata\Commands\PublishPluginCommand;
use Kanata\Commands\ShellCommand;
use Kanata\Commands\StartHttpServerCommand;
use Kanata\Commands\StartMessageServiceCommand;
use Kanata\Commands\StartWsServerCommand;
use Kanata\Services\Bootstrap;
use PHPUnit\Framework\TestCase as BaseTestCase;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

class TestCase extends BaseTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Bootstrap::migrateBase(true, true);
    }

    public function startConsole()
    {
        global $application;

        $application = new Application();
        $application->add(new InfoCommand);
        $application->add(new StartHttpServerCommand);
        $application->add(new StartWsServerCommand);
        $application->add(new StartMessageServiceCommand);
        $application->add(new DebuggerCommand);
        $application->add(new ListPluginCommand);
        $application->add(new CreatePluginCommand);
        $application->add(new ActivatePluginCommand);
        $application->add(new DeactivatePluginCommand);
        $application->add(new ShellCommand);
        $application->add(new PublishPluginCommand);
        $application->add(new CreateCommand);
    }

    public function runCommand(string $commandName, $args = []): CommandTester
    {
        global $application;

        $command = $application->find($commandName);
        $tester = new CommandTester($command);
        $tester->execute($args);
        return $tester;
    }
}