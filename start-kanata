#!/usr/bin/env php
<?php

foreach ([
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php'
 ] as $file) {
    if (file_exists($file)) {
        define('PHPUNIT_COMPOSER_INSTALL', $file);
        break;
    }
}

if (!defined('PHPUNIT_COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );
    die(1);
}

require PHPUNIT_COMPOSER_INSTALL;

use Lazer\Classes\Database as Lazer;
use Lazer\Classes\Helpers\Validate;
use Lazer\Classes\LazerException;


foreach ([
    realpath(__DIR__) . '/data/',
    realpath(__DIR__) . '/../data/',
    realpath(__DIR__) . '/../../data/',
    realpath(__DIR__) . '/../../../data/',
 ] as $file) {
    if (file_exists($file)) {
        define('LAZER_DATA_PATH', $file);
        break;
    }
}

if (!defined('LAZER_DATA_PATH')) {
    fwrite(
        STDERR,
        'The data directory couldn\'t be found.' . PHP_EOL .
        'Make sure it is present at the root directory of your application.' . PHP_EOL
    );
    die(1);
}

// -----------------------------------------------------
// prepare json dbs
// -----------------------------------------------------

// plugins
$plugins_table = 'plugins';
try {
    Validate::table($plugins_table)->exists();
} catch (LazerException $e) {
    Lazer::create($plugins_table, [
        'active' => 'boolean',
        'directory_name' => 'string',
        'path' => 'string',
        'name' => 'string',
        'author_name' => 'string',
        'author_email' => 'string',
        'description' => 'string',
    ]);
}

// ws channels
$wschannels_table = 'wschannels';
try {
    Validate::table($wschannels_table)->exists();
} catch (LazerException $e) {
    Lazer::create($wschannels_table, [
        'fd' => 'integer',
        'channel' => 'string',
    ]);
}

// ws listeners
$wslisteners_table = 'wslisteners';
try {
    Validate::table($wslisteners_table)->exists();
} catch (LazerException $e) {
    Lazer::create($wslisteners_table, [
        'fd' => 'integer',
        'action' => 'string',
    ]);
}

// ws communications
$wscommunications_table = 'wscommunications';
try {
    Validate::table($wscommunications_table)->exists();
} catch (LazerException $e) {
    Lazer::create($wscommunications_table, [
        'action' => 'string',
        'data' => 'string',
    ]);
}